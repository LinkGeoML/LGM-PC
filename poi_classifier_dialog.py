# -*- coding: utf-8 -*-
"""
/***************************************************************************
 poi_classifierDialog
                                 A QGIS plugin
 QGIS plugin for automatic POI classification
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2020-05-12
        git sha              : $Format:%H$
        copyright            : (C) 2020 by GeoData
        email                : geft@eranet.gr , ivarkas@eranet.gr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os,glob,time,subprocess,datetime,csv,sys
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from PyQt5 import QtWidgets,QtGui,QtCore
from PyQt5.QtWidgets import QMainWindow, QLabel, QGridLayout, QWidget, QMenu,QAction
from PyQt5.QtWidgets import QPushButton,QFileDialog,QInputDialog,QLineEdit
from PyQt5.QtWidgets import QMessageBox,QDialog,QProgressBar,QCheckBox
from PyQt5.QtCore import *
from qgis.core import *
from qgis.gui import *
from qgis.PyQt.QtWidgets import QWidget
from PyQt5.QtWidgets import QTableWidget,QTableWidgetItem,QVBoxLayout
from PyQt5.QtGui import *
from qgis.utils import iface
from .poi_classifier_train import PoiClassifierTrainDialog

default_path=QgsApplication.qgisSettingsDirPath() + "\python\plugins"  #OS independent default  path for qgis plugins
os.chdir(default_path)

temp1=os.getcwd()
temp2=os.listdir(path=str(temp1))
if "poi_classifier" in temp2:
    os.chdir(".\\poi_classifier")
	
# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'poi_classifier_dialog_base.ui'))


class poi_classifierDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(poi_classifierDialog, self).__init__(parent)
        self.setupUi(self)
        self.trainbtn.clicked.connect(self.TrainingSectionbtncliked)
        self.choosepoifilefilebtn.clicked.connect(self.choosepoifilefilebtncliked)
        self.runclassifybtn.clicked.connect(self.runclassifybtncliked)
        self.showresultsbtn.clicked.connect(self.showresultsbtncliked)
        self.user_choicesbtn.clicked.connect(self.user_choicesbtnclicked)        
        self.myupdatebtn.clicked.connect(self.myupdatebtncliked)
        self.autobtn.clicked.connect(self.autobtnclicked)
        self.tableWidget.setContextMenuPolicy(Qt.CustomContextMenu)
        self.tableWidget.customContextMenuRequested.connect(self.tableWidgetpopup)    		
    def TrainingSectionbtncliked(self):     	
        self.dlg = PoiClassifierTrainDialog()    		
        self.dlg.show()		
        		
    def choosepoifilefilebtncliked(self):
        QMessageBox.information(self,"INFO","Choose input file")
        try:
            fd=QFileDialog()
            mfullstr=str(fd.getOpenFileName(self,"Choose POI File to Classify ",os.getcwd()) )
            fname=mfullstr[2:mfullstr.index("'", 3, 1000)] # fname has the full path of the desired poi file
            self.choosepoifilefilechoosenfile.setText(fname) # set the fname to choosepoifilefilechoosenfile as text
            
        except FileNotFoundError:
            QMessageBox.warning(self,"CAUTION","No classification data specified")   
            self.choosepoifilefilechoosenfile.clear()		


    def loadpoilayer(self,uri,themode,fname):
        layer_csv = QgsVectorLayer(uri, "POI2Clasify", 'delimitedtext')
        if themode=='xy':
            QMessageBox.information( self,"Info","xy")
            layer_csv.setCrs(QgsCoordinateReferenceSystem(2100))
        if themode=='ll':
            layer_csv.setCrs(QgsCoordinateReferenceSystem(4325))
        
        properties = {'style': 'no','width_border': '1.1','color_border': 'red','style_border' : 'solid'}
        symbol = QgsFillSymbol.createSimple(properties)
        symbol = QgsMarkerSymbol.createSimple({'name': 'square', 'color': 'red'})
        layer_csv.setRenderer(QgsSingleSymbolRenderer(symbol))
        layer_settings  = QgsPalLayerSettings()
        layer_settings.fieldName = "name"
        layer_settings.placement = 4
        layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
        layer_csv.setLabelsEnabled(True)
        layer_csv.setLabeling(layer_settings)
        default_path=QgsApplication.qgisSettingsDirPath() + "\\python\\plugins\\poi_classifier"		
                    		
        
        uiformfilepath = default_path + '.\\formui\\pois_data.ui'        
        uiformcodepath = default_path + '.\\formui\\pois_data.py'		
        
        config = layer_csv.editFormConfig()
        config.setInitCodeSource(1)
        
        config.setUiForm(uiformfilepath)
        config.setInitFilePath(uiformcodepath)
        config.setInitFunction("my_form_open")
        layer_csv.setEditFormConfig(config)
        QgsProject.instance().addMapLayer(layer_csv)
        	
    def runclassifybtncliked(self):
        pythonpoi2classifyfilename=self.choosepoifilefilechoosenfile.text()  #the pythonpoi2classifyfilename gets the choosepoifilefilechoosenfile as text 
        if len(pythonpoi2classifyfilename)<4:
            QMessageBox.information(self,"INFO","Please select a POI file to classify in order to proceed")		
        else:
            experiment_path=QFileDialog()
            exp_path = (experiment_path.getExistingDirectory(self,"Please choose experiment path file",str(os.getcwd()),QFileDialog.ShowDirsOnly)) + "\\"
            progress = QProgressBar()
            progress.setGeometry(200, 80, 250, 20)
            progress.move(600,600)
            progress.setWindowTitle('Processing..')
            progress.setAlignment(QtCore.Qt.AlignCenter)
            progress.show()
            command = f'python .\\LGM-Classification-master\\src\\model_deployment.py -experiment_path {exp_path} -poi_fpath {pythonpoi2classifyfilename}'
            try:
                output = subprocess.check_output(command,shell=True,stderr=subprocess.STDOUT,universal_newlines=True)
            except subprocess.CalledProcessError:
                QMessageBox.warning(self,"WARNING","Execution of command failed")
            QMessageBox.information(self,'INFO',str(output))
            csv_filepath = exp_path + "model_deployment_results\\predictions.csv"
            csvmyfile = exp_path + "model_deployment_results\\predictionsrplconverted.csv"
            with open(csv_filepath, newline='', encoding='UTF-8') as csv_file:
                with open(csvmyfile,"w",newline='') as myfile: # error is that the file predictionsrplconverted is empty(even if we copy the values, after running the classification still remains empty) change w --> r+ 
                    csv_data = csv.reader(csv_file,quoting=csv.QUOTE_ALL,skipinitialspace='True') ###
                    count = 0
                
                    for row in csv_data:
                        if count < 1 :
                            count=1
                            continue
                        else:
                            if len(str(row))>2:                         
                                if count < 0:
                                    QMessageBox.information(self,"Info", str(row))
                                 a=row[0]  #row[0] --> poi id
                                
                                b=row[1]   # row[1] --> category
                                
                                c=row[2]  # row[2] --> score
                                c=c.replace('"'," ").replace("["," ").replace("]"," ").replace('"'," ")
                                wr = csv.writer(myfile)
                                wr.writerow([a,b,c])
                                count=count+1
            count=count -1  # remove header from csv
			
    def last_exp_file(self):    # function that takes the last file in experiments folder (model deployment as the last step) 
        temp1=os.getcwd() 
        temp2=os.listdir(path=str(temp1))
        latest_file = ""
        if 'experiments' in temp2:
            list_of_files = glob.glob('.\\experiments\\*')  
            latest_file = max(list_of_files,key=os.path.getctime)
        else:
            latest_file = ("")
        return latest_file 

		
    def showresultsbtncliked(self):
        csv_filepath = self.last_exp_file() + "\\model_deployment_results\\predictionsrplconverted.csv"
        fname=self.choosepoifilefilechoosenfile.text()
        uri = 'file:///'+ fname +'?d?delimiter=%s&xField=%s&yField=%s' % (",", "x", "y")
        themode='-'
        with open(fname, newline='', encoding='utf-8') as csv_file:
            csv_data = csv.reader(csv_file, delimiter=',')
            rownum = 0
            for row in csv_data:
                if rownum==0:
                    for elem in row:
                        if str(elem)=="x":
                            themode='xy'
                        if str(elem)=="longitude":
                            themode='ll'
                rownum=rownum+1
        csv_file.close
        if themode=='-':
            QMessageBox.information( self,"Info", fname)
        else:
            if themode =='xy':
                uri = 'file:///'+ fname +'?d?delimiter=%s&xField=%s&yField=%s' % (",", "x", "y")
                self.loadpoilayer(uri,themode,fname)
            if themode=='ll':
                uri = 'file:///'+ fname +'?d?delimiter=%s&xField=%s&yField=%s' % (",", "longitude", "latitude")
                self.loadpoilayer(uri,themode,fname)       
        with open(csv_filepath, newline='', encoding='utf-8') as csv_file:
            csv_data = csv.reader(csv_file)
            count=0
            for row in csv_data:
                count+=1
        self.createTable(count)
		
    def createTable(self,count):                   #createTable(self,counter): the working one
        self.tableWidget.setRowCount(count) # self.tableWidget.setRowCount(counter)
        self.tableWidget.setColumnCount(7)  # defore self.tableWidget.setColumnCount(4)
        rownum=0
        csv_filepath = self.last_exp_file() + "\\model_deployment_results\\predictionsrplconverted.csv"
        progress = QProgressBar()
        progress.setGeometry(200, 80, 250,20)
        progress.move(600,600)
        progress.setWindowTitle('Loading Result Table')
        progress.setAlignment(QtCore.Qt.AlignCenter)
        progress.show()
        
        with open(csv_filepath, newline='', encoding='utf-8') as csv_file:  #encoding changed 'utf-8' --> 'ISO-8859-7'
            csv_data = csv.reader(csv_file, delimiter=',')
            rownum = 0          
            for row in csv_data:
                
                a=row[2]
                j=a.split(',',2)[:2]
                k=a.split(',',4)[2:4]
                l=a.split(',',6)[4:6]
                m=a.split(',',8)[6:8]
                n=a.split(',',10)[8:10]
                if len(str(row))>2:     
                    chkBoxItem=QTableWidgetItem()
                    chkBoxItem.setFlags(QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled) 
                   if str(row[2])=="0":    ####it was  if str(row[3])=="0":    
                        chkBoxItem.setCheckState(QtCore.Qt.Unchecked)
                    else:           
                        chkBoxItem.setCheckState(QtCore.Qt.Checked)             
                    item1=QTableWidgetItem(str(row[0]))
                    item2=QTableWidgetItem(str(row[1]))
                    j=str(j).replace("[","").replace('"','').replace("(","").replace("'","").replace("]","").replace(")","")
                    k=str(k).replace("[","").replace('"','').replace("(","").replace("'","").replace("]","").replace(")","")
                    l=str(l).replace("[","").replace('"','').replace("(","").replace("'","").replace("]","").replace(")","")
                    m=str(m).replace("[","").replace('"','').replace("(","").replace("'","").replace("]","").replace(")","")
                    n=str(n).replace("[","").replace('"','').replace("(","").replace("'","").replace("]","").replace(")","")
                    checkbox3=QCheckBox(str(j))
                    checkbox4=QCheckBox(str(k))
                    checkbox5=QCheckBox(str(l))
                    checkbox6=QCheckBox(str(m))
                    checkbox7=QCheckBox(str(n))
                    checkbox3.setCheckState(Qt.Unchecked)
                    checkbox4.setCheckState(Qt.Unchecked)
                    checkbox5.setCheckState(Qt.Unchecked)
                    checkbox6.setCheckState(Qt.Unchecked)
                    checkbox7.setCheckState(Qt.Unchecked)
                    self.tableWidget.setItem(rownum,0, item1)  #id
                    self.tableWidget.setItem(rownum,1, item2) #address
                    self.tableWidget.setCellWidget(rownum,2,checkbox3) 
                    self.tableWidget.setCellWidget(rownum,3,checkbox4)
                    self.tableWidget.setCellWidget(rownum,4,checkbox5)
                    self.tableWidget.setCellWidget(rownum,5,checkbox6)
                    self.tableWidget.setCellWidget(rownum,6,checkbox7)
                    rownum=rownum+1
            self.tableWidget.setHorizontalHeaderItem(0, QTableWidgetItem("POI_id"))
            self.tableWidget.setHorizontalHeaderItem(1, QTableWidgetItem("Category"))
            self.tableWidget.setHorizontalHeaderItem(2, QTableWidgetItem("Score 1"))
            self.tableWidget.setHorizontalHeaderItem(3, QTableWidgetItem("Score 2"))
            self.tableWidget.setHorizontalHeaderItem(4, QTableWidgetItem("Score 3"))
            self.tableWidget.setHorizontalHeaderItem(5, QTableWidgetItem("Score 4"))
            self.tableWidget.setHorizontalHeaderItem(6, QTableWidgetItem("Score 5"))
            self.tableWidget.resizeColumnsToContents()
            self.tableWidget.setRowCount(rownum)       # .setRowCount(rownum)
            


    def user_choicesbtnclicked(self): # creates a pop up table that shows the user's choice 
        self.tableWidget = QTableWidget()
        with open(filedlg, newline='', encoding='utf-8') as csv_file:
            csv_data = csv.reader(csv_file, delimiter=',')
            rownum = 0
            for row in csv_data:
                rownum+=1
        csv_file.close()				
        with open(filedlg, newline='', encoding='utf-8') as csv_file:  #encoding changed 'utf-8' --> 'ISO-8859-7'
            csv_data = csv.reader(csv_file, delimiter=',')
            self.tableWidget.setRowCount(rownum) 
            self.tableWidget.setColumnCount(3)  
            self.tableWidget.setHorizontalHeaderItem(0, QTableWidgetItem("name"))
            self.tableWidget.setHorizontalHeaderItem(1, QTableWidgetItem("category")) 			
            self.tableWidget.setHorizontalHeaderItem(2, QTableWidgetItem("score"))			
            next(csv_data)
            rownum = 0			 
            for row in csv_data:
                self.tableWidget.setItem(rownum,0,QTableWidgetItem(str(row[1])))
                self.tableWidget.setItem(rownum,1,QTableWidgetItem(str(str(row[2]).split(",")[:1]).replace("[","").replace("]","").replace("'","").replace('"','')))
                self.tableWidget.setItem(rownum,2, QTableWidgetItem(str(str(row[2]).split(",")[1:2]).replace("[","").replace("]","").replace("'","").replace('"','')))
                self.tableWidget.item(rownum,0).setBackground(QtGui.QColor(200,200,200))
                self.tableWidget.item(rownum,1).setBackground(QtGui.QColor(215,215,215))
                self.tableWidget.item(rownum,2).setBackground(QtGui.QColor(215,215,215))
                self.tableWidget.item(rownum,0).setFlags(QtCore.Qt.ItemIsEnabled)	
                self.tableWidget.item(rownum,1).setFlags(QtCore.Qt.ItemIsEnabled)
                self.tableWidget.item(rownum,2).setFlags(QtCore.Qt.ItemIsEnabled)
                rownum+=1
                
        self.tableWidget.setWindowTitle("Classification Results - User Choices")     				
        self.tableWidget.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        self.tableWidget.resizeColumnsToContents()
        self.tableWidget.setRowCount(rownum)		
        self.tableWidget.show()

    def myupdatebtncliked(self):
        global filedlg    
        exppath = self.last_exp_file() + "\\model_deployment_results"
        QMessageBox.information(self,"INFO","Select where to save your choices in a csv file")
        progress = QProgressBar()
        progress.setGeometry(200, 80, 250, 20)
        progress.move(600,600)
        progress.setWindowTitle('Please Wait ')
        progress.setAlignment(QtCore.Qt.AlignCenter)
        progress.show()
        time.sleep(1)
        filedlg=str(QFileDialog.getSaveFileName(self,"Select where to save your CSV choices",("*.csv")))
        filedlg=filedlg[2:filedlg.index("'", 4, 1000)]
        with open(filedlg,'w+',newline='', encoding='UTF-8') as fp:	
            wr = csv.writer(fp,quoting=csv.QUOTE_MINIMAL,escapechar='\n',delimiter=",",skipinitialspace='True')
            wr.writerow(['id','name','category','score'])
            for i in range(0,self.tableWidget.rowCount()):
                if self.tableWidget.cellWidget(i,2).isChecked():
                    wr.writerow([self.tableWidget.item(i,0).text(),self.tableWidget.item(i,1).text(),self.tableWidget.cellWidget(i,2).text()])
                if self.tableWidget.cellWidget(i,3).isChecked():
                   wr.writerow([self.tableWidget.item(i,0).text(),self.tableWidget.item(i,1).text() ,self.tableWidget.cellWidget(i,3).text()])
                if self.tableWidget.cellWidget(i,4).isChecked():
                   wr.writerow([self.tableWidget.item(i,0).text(),self.tableWidget.item(i,1).text() ,self.tableWidget.cellWidget(i,4).text()])
                if self.tableWidget.cellWidget(i,5).isChecked():                        
                    wr.writerow([self.tableWidget.item(i,0).text(),self.tableWidget.item(i,1).text() ,self.tableWidget.cellWidget(i,5).text()])    
                if self.tableWidget.cellWidget(i,6).isChecked():    
                   wr.writerow([self.tableWidget.item(i,0).text(),self.tableWidget.item(i,1).text() ,self.tableWidget.cellWidget(i,6).text()])
                   
            
            
        return filedlg    
          

    def autobtnclicked(self): # That button selects the results that are above 60% and checks the appropriate checkbox in the table (0.6)   	
        results_path = self.last_exp_file() + "\\model_deployment_results\\predictionsrplconverted.csv"	
        with open(results_path,'r',encoding='utf-8') as results_csv:
            csv_reader=csv.reader(results_csv,quoting=csv.QUOTE_MINIMAL,skipinitialspace='True')
            count=0
            for row in csv_reader:	 
                a=(row[2])
                				
                if (float((str(a.split(',',2)[1:2])).replace("[","").replace("'","").replace("]","").replace(")",""))) > 0.60: 	
                    self.tableWidget.cellWidget(count,2).setCheckState(Qt.Checked)	
                if (float((str(a.split(',',4)[3:4])).replace("[","").replace("'","").replace("]","").replace(")",""))) > 0.60:	
                    self.tableWidget.cellWidget(count,3).setCheckState(Qt.Checked)	
                if (float((str(a.split(',',6)[5:6])).replace("[","").replace("'","").replace("]","").replace(")","")))> 0.60:    	
                    self.tableWidget.cellWidget(count,4).setCheckState(Qt.Checked)
                if (float((str(a.split(',',8)[7:8])).replace("[","").replace("'","").replace("]","").replace(")",""))) > 0.60:
                    self.tableWidget.cellWidget(count,5).setCheckState(Qt.Checked)
                if (float((str(a.split(',',10)[9:10])).replace("[","").replace("'","").replace("]","").replace(")",""))) > 0.60:
                    self.tableWidget.cellWidget(count,6).setCheckState(Qt.Checked)
                count+=1					
        return count

#################################tableWidget related ##############################################
################################################################################################################################################################
################################################################################################################################################################
    def tableWidgetpopup(self,event):
        
        self.popupMenu  = QtWidgets.QMenu()	
        Action2 = QAction("Go to Parcel",self)
        self.popupMenu.addAction(Action2)
        
        Action2.triggered.connect(self.gotoinitpoisfeature)
        self.popupMenu.popup(QCursor.pos())
    def select_from_tableWidget(self):
        r=self.tableWidget.selectionModel().currentIndex().row()
        c=self.tableWidget.selectionModel().currentIndex().column()
        return self.tableWidget.item(r,0).text()		
    
    def gotoinitpoisfeature(self):
        poi_id=self.select_from_tableWidget()
        alllayers = iface.mapCanvas().layers()
        for layer in alllayers:
            if (layer.name()=="POI2Clasify"):
                cLayer=layer
                cLayer.removeSelection()
                cLayer.selectByExpression(("\"poi_id\" = '{}'").format(poi_id),QgsVectorLayer.SetSelection)
                box = cLayer.boundingBoxOfSelected()
                iface.mapCanvas().setExtent(box)
                canvas = iface.mapCanvas()
                canvas.zoomToSelected(cLayer) 				
        iface.mapCanvas().refresh()
       





				
				
	